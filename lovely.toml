[manifest]
version = "1.0.0"
dump_lua = true
priority = 0


# JOKERS

# MULT

# Ceremonial Dagger: adds 3x / 4x / 5x sell value
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.mult = self.ability.mult + sliced_card.sell_cost*2"
position = "at" # before, after, or at
payload = "self.ability.mult = self.ability.mult + sliced_card.sell_cost*(2 + ((mult_level-1) * 1))"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize{type = 'variable', key = 'a_mult', vars = {self.ability.mult+2*sliced_card.sell_cost}}, colour = G.C.RED, no_juice = true})"
position = "at" # before, after, or at
payload = "card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize{type = 'variable', key = 'a_mult', vars = {self.ability.mult + sliced_card.sell_cost*(2 + ((mult_level-1) * 1))}}, colour = G.C.RED, no_juice = true})"
match_indent = true

# Shoot The Moon: +15 / +17 / +19 mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "h_mult = 13,"
position = "at" # before, after, or at
payload = "h_mult = 13 + ((mult_level-1) * 2),"
match_indent = true

# Raised Fist: 3x / 4x / 5x lowest card to mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "h_mult = 2*temp_Mult,"
position = "at" # before, after, or at
payload = "h_mult = temp_Mult * (2+((mult_level-1) * 1)),"
match_indent = true

# Red Card should not activate if a "choose an upgrade" is opened
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if context.open_booster then"
position = "at" # before, after, or at
payload = "if context.open_booster and not upgrade_non_booster then"
match_indent = true

# Supernova: adds double / triple / quadruple the number of times poker hand played to mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "mult_mod = G.GAME.hands[context.scoring_name].played"
position = "at" # before, after, or at
payload = "mult_mod = G.GAME.hands[context.scoring_name].played * mult_level"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "message = localize{type='variable',key='a_mult',vars={G.GAME.hands[context.scoring_name].played}},"
position = "at" # before, after, or at
payload = "message = localize{type='variable',key='a_mult',vars={G.GAME.hands[context.scoring_name].played * mult_level}},"
match_indent = true


# Swashbuckler: adds 1.5x / 2x / 2.5x the sell value to mult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.mult = sell_cost"
position = "at" # before, after, or at
payload = "self.ability.mult = math.floor(sell_cost*(1+((mult_level-1)/2)))"
match_indent = true


# XMULT

# Joker Stencil: gives X1.2 / X1.4 / X1.6 per unused joker slot
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.x_mult = (G.jokers.config.card_limit - #G.jokers.cards)"
position = "at" # before, after, or at
payload = "self.ability.x_mult = (G.jokers.config.card_limit - #G.jokers.cards) * (1 + (xmult_level-1)*0.25)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if G.jokers.cards[i].ability.name == 'Joker Stencil' then self.ability.x_mult = self.ability.x_mult + 1 end"
position = "at" # before, after, or at
payload = "if G.jokers.cards[i].ability.name == 'Joker Stencil' then self.ability.x_mult = self.ability.x_mult + (1 + (xmult_level-1)*0.25) end"
match_indent = true

# Glass Joker: respond to breakage of cards from Level 2 Immolate and Familiar
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Glass Joker' and not context.blueprint and context.consumeable.ability.name == 'The Hanged Man'  then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Glass Joker' and not context.blueprint and ((context.consumeable.ability.name == 'The Hanged Man') or (context.consumeable.ability.name == 'Immolate' and spectral_level >= 2) or (context.consumeable.ability.name == 'Familiar' and spectral_level >= 2)) then"
match_indent = true

# Canio: respond to breakage of cards from Level 2 Immolate and Familiar
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif context.using_consumeable then"
position = "after" # before, after, or at
payload = """if self.ability.name == 'Caino' and not context.blueprint and ((context.consumeable.ability.name == 'Immolate' and spectral_level >= 2) or (context.consumeable.ability.name == 'Familiar' and spectral_level >= 2)) then
                local destroyed_cards = 0
                for k, val in ipairs(G.hand.highlighted) do
                    if val:is_face() then destroyed_cards = destroyed_cards + 1 end
                end
                if destroyed_cards > 0 then
                    self.ability.caino_xmult = self.ability.caino_xmult + self.ability.extra*destroyed_cards
                    G.E_MANAGER:add_event(Event({
                        func = function() card_eval_status_text(self, 'extra', nil, nil, nil, {message = localize{type='variable',key='a_xmult',vars={self.ability.caino_xmult}}}); return true
                        end}))            return nil, true
                end
                return
            end"""
match_indent = true



# Driver's License: becomes a scaling XMult
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if (self.ability.driver_tally or 0) >= 16 then"
position = "at" # before, after, or at
payload = """if xmult_level >= 2 and (self.ability.driver_tally or 0) > 0 then 
  return {
    message = localize{type='variable',key='a_xmult',vars={1 + (self.ability.extra*self.ability.driver_tally)}},
    Xmult_mod = 1 + (self.ability.extra*self.ability.driver_tally), 
    colour = G.C.MULT
  }
elseif xmult_level == 1 and (self.ability.driver_tally or 0) >= 16 then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """elseif self.ability.name == "Driver's License" then loc_vars = {self.ability.extra, self.ability.driver_tally or '0'}"""
position = "at" # before, after, or at
payload = """elseif self.ability.name == "Driver's License" then loc_vars = {self.ability.extra, self.ability.driver_tally or '0', 1 + self.ability.extra*(self.ability.driver_tally or 0)}"""
match_indent = true

# Flower Pot and Seeing Double: level 3 gives Xmult for a single wild card
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "['Spades'] = 0,"
position = "after" # before, after, or at
payload = "['Wilds'] = 0,"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if (suits["Hearts"] > 0 or"""
position = "at" # before, after, or at
payload = """if ((suits["Hearts"] > 0 or"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if suits["Hearts"] > 0 and"""
position = "at" # before, after, or at
payload = """if (suits["Hearts"] > 0 and"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """suits["Clubs"] > 0 then"""
position = "at" # before, after, or at
payload = """suits["Clubs"] > 0) or (suits["Wilds"] > 0) then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if context.scoring_hand[i].ability.name == 'Wild Card' or context.scoring_hand[i].config.center.any_suit then"""
position = "after" # before, after, or at
payload = """if xmult_level >= 2 then suits["Wilds"] = suits["Wilds"] + 1 end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if context.scoring_hand[i]:is_suit('Hearts', true) and suits["Hearts"] == 0 then suits["Hearts"] = suits["Hearts"] + 1"""
position = "before" # before, after, or at
payload = """if xmult_level == 1 then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """elseif context.scoring_hand[i]:is_suit('Clubs', true) and suits["Clubs"] == 0  then suits["Clubs"] = suits["Clubs"] + 1 end"""
position = "after" # before, after, or at
payload = """elseif xmult_level >= 2 then
  if context.scoring_hand[i]:is_suit('Hearts') and suits["Hearts"] == 0 then suits["Hearts"] = suits["Hearts"] + 1 end
  if context.scoring_hand[i]:is_suit('Diamonds') and suits["Diamonds"] == 0 then suits["Diamonds"] = suits["Diamonds"] + 1 end
  if context.scoring_hand[i]:is_suit('Spades') and suits["Spades"] == 0 then suits["Spades"] = suits["Spades"] + 1 end
  if context.scoring_hand[i]:is_suit('Clubs') and suits["Clubs"] == 0 then suits["Clubs"] = suits["Clubs"] + 1 end
end"""
match_indent = true


# ECON

# Business Card: gives $2 / $3 / $4
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2"
position = "at" # before, after, or at
payload = "G.GAME.dollar_buffer = (G.GAME.dollar_buffer or 0) + 2 + ((econ_level-1) * 1)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "dollars = 2,"
position = "at" # before, after, or at
payload = "dollars = 2 + ((econ_level-1) * 1),"
match_indent = true

# Trading Card: at level 3, every hand counts at the first hand
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local eval = function() return G.GAME.current_round.discards_used == 0 and not G.RESET_JIGGLES end"
position = "at" # before, after, or at
payload = "local eval = function() return (G.GAME.current_round.discards_used == 0 or (G.GAME.current_round.discards_used >= 0 and econ_level >= 3)) and not G.RESET_JIGGLES end"
match_indent = true

# Delayed Gratification: at level 2, the "if no discards are used" requirement is removed 
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Delayed Gratification' and G.GAME.current_round.discards_used == 0 and G.GAME.current_round.discards_left > 0 then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Delayed Gratification' and G.GAME.current_round.discards_left > 0 and (G.GAME.current_round.discards_used == 0 or econ_level >= 2) then"
match_indent = true




# EFFECT

# Riff-Raff: creates 2 / 3 / 4 jokers, any rarity
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Joker', G.jokers, nil, 0, nil, nil, nil, 'rif')"
position = "at" # before, after, or at
payload = """local card = nil
if effect_level == 1 then
  card = create_card('Joker', G.jokers, nil, 0, nil, nil, nil, 'rif')
elseif effect_level >= 2 then
  card = create_card('Joker', G.jokers, nil, nil, nil, nil, nil, 'rif')
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local jokers_to_create = math.min(2, G.jokers.config.card_limit - (#G.jokers.cards + G.GAME.joker_buffer))"
position = "at" # before, after, or at
payload = "local jokers_to_create = math.min(math.max(2, effect_level), G.jokers.config.card_limit - (#G.jokers.cards + G.GAME.joker_buffer))"
match_indent = true

# Chaos the Clown: gives 2 / 3 / 4 free rerolls
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + 1"
position = "at" # before, after, or at
payload = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + effect_level"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls - 1"
position = "at" # before, after, or at
payload = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls - effect_level"
match_indent = true

# Sixth Sense: gives 1 / 2 / 3 spectral cards, level 2 allows this to happen on any hand, not just the first; level 3 allows blueprint/brainstorm compatibility
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Sixth Sense' and #context.full_hand == 1 and context.full_hand[1]:get_id() == 6 and G.GAME.current_round.hands_played == 0 then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Sixth Sense' and #context.full_hand == 1 and context.full_hand[1]:get_id() == 6 and (G.GAME.current_round.hands_played == 0 or effect_level >= 2) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif context.destroying_card and not context.blueprint then"
position = "at" # before, after, or at
payload = "elseif (context.destroying_card and effect_level >= 3) or (context.destroying_card and not context.blueprint) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'sixth')"
position = "before" # before, after, or at
payload = """for i = 1, math.max(1, effect_level-1) do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.consumeable_buffer = 0"
position = "after" # before, after, or at
payload = """end
end"""
match_indent = true

# Superposition: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, nil, 'sup')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Seance: creates 2 / 3 / 4 spectral cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Spectral',G.consumeables, nil, nil, nil, nil, nil, 'sea')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Hallucination: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, 'hal')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Hallucination should not activate if a "choose an upgrade" is opened
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "elseif context.skipping_booster then"
position = "at" # before, after, or at
payload = "elseif context.skipping_booster and not upgrade_non_booster then"
match_indent = true

# Cartomancer: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, 'car')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# 8 Ball: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "                                            local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, '8ba')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Midas Mask:
# Level 1: vanilla
# Level 2: Gold Seal
# Level 3: Negative Gold Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "v:set_ability(G.P_CENTERS.m_gold, nil, true)"
position = "after" # before, after, or at
payload = """G.E_MANAGER:add_event(Event({
  func = function()
    v:juice_up()
    return true
  end
})) 
if effect_level >= 2 then
  v:set_seal('Gold', true)
end
if effect_level >= 3 then
  v:set_edition({negative = true}, true)
end
if false then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if #faces > 0 then"
position = "before" # before, after, or at
payload = "end"
match_indent = true


# Vagabond: creates 2 / 3 / 4 tarot cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, 'vag')"
position = "before" # before, after, or at
payload = """for i = 1, effect_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# DNA: level 3 allows any hand, not just first
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local eval = function() return G.GAME.current_round.hands_played == 0 end"
position = "at" # before, after, or at
payload = "local eval = function() return (G.GAME.current_round.hands_played == 0 or (G.GAME.current_round.hands_played >= 0 and effect_level >= 3)) and not G.RESET_JIGGLES end"
match_indent = true

# Diet Cola: gives 2 / 3 / 4 double tags
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "add_tag(Tag('tag_double'))"
position = "before" # before, after, or at
payload = "for i = 1, effect_level do"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "play_sound('holo1', 1.2 + math.random()*0.1, 0.4)"
position = "before" # before, after, or at
payload = "end"
match_indent = true

# Invisible Joker: requires 1 / 0 / 0 rounds; level 3 always chooses leftmost joker; level 4 no longer removes Negative from copy
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local chosen_joker = pseudorandom_element(jokers, pseudoseed('invisible'))"
position = "after" # before, after, or at
payload = """if effect_level >= 3 then
  chosen_joker = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if card.ability.invis_rounds then card.ability.invis_rounds = 0 end"
position = "after" # before, after, or at
payload = """if card.edition and card.edition.negative then
  if effect_level <= 3 then card:set_edition(nil, true) end
end"""
match_indent = true

# Level 3+ Invisible Joker sells for $0 to prevent one from selling one Invisible Joker to duplicate another and getting infinite money
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.sell_cost = math.max(1, math.floor(self.cost/2)) + (self.ability.extra_value or 0)"
position = "after" # before, after, or at
payload = """if self.ability.name == 'Invisible Joker' and effect_level >= 3 then self.sell_cost = 0 end
if self.ability.name == 'Strength' and effect_level >= 2 then self.sell_cost = 0 end"""
match_indent = true

# Mr. Bones: prevents death at 2.5%, 0.25%, 0.025% etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.chips/G.GAME.blind.chips >= 0.25 then"
position = "at" # before, after, or at
payload = "(G.GAME.chips/G.GAME.blind.chips) >= (2.5 / (10^effect_level)) then"
match_indent = true

# Oops! All 6s: multiplies probabilities by 3 / 4 / 5 etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.probabilities[k] = v/2"
position = "at" # before, after, or at
payload = "G.GAME.probabilities[k] = v/(effect_level+1)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.probabilities[k] = v*2"
position = "at" # before, after, or at
payload = "G.GAME.probabilities[k] = v*(effect_level+1)"
match_indent = true

# Space Joker: 1 in 3, 1 in 2, 1 in 1, then 2 / 3 / 4 levels
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "level_up = true,"
position = "at" # before, after, or at
payload = ""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "message = localize('k_level_up_ex')"
position = "at" # before, after, or at
payload = ""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Space Joker' and pseudorandom('space') < G.GAME.probabilities.normal/self.ability.extra then"
position = "after" # before, after, or at
payload = """local text,disp_text = G.FUNCS.get_poker_hand_info(G.play.cards)
                card_eval_status_text(context.blueprint_card or self, 'extra', nil, nil, nil, {message = localize('k_level_up_ex')})
                update_hand_text({sound = 'button', volume = 0.7, pitch = 0.8, delay = 0.3}, {handname=localize(text, 'poker_hands'),chips = G.GAME.hands[text].chips, mult = G.GAME.hands[text].mult, level=G.GAME.hands[text].level})
                level_up_hand(context.blueprint_card or self, text, nil, math.max(1, effect_level-3))"""
match_indent = true

# Burnt Joker: upgrades the hand by 2 / 3 / 4 levels; level 4 upgrades any discarded hand
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "level_up_hand(context.blueprint_card or self, text, nil, 1)"
position = "at" # before, after, or at
payload = "level_up_hand(context.blueprint_card or self, text, nil, effect_level)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Burnt Joker' and G.GAME.current_round.discards_used <= 0 and not context.hook then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Burnt Joker' and ((G.GAME.current_round.discards_used <= 0 and not context.hook) or effect_level >= 4) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Trading Card' and not context.blueprint then"
position = "before" # before, after, or at
payload = """if self.ability.name == 'Burnt Joker' then
  local eval = function() return (G.GAME.current_round.discards_used == 0 or (G.GAME.current_round.discards_used >= 0 and effect_level >= 4)) and not G.RESET_JIGGLES end
  juice_card_until(self, eval, true)
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card_eval_status_text(context.blueprint_card or self, 'extra', nil, nil, nil, {message = localize('k_upgrade_ex')})"
position = "at" # before, after, or at
payload = "card_eval_status_text(context.blueprint_card or self, 'extra', nil, nil, nil, {message = localize('k_level_up_ex')})"
match_indent = true

# Chicot: reduces blind level by 2 / 3 / 4
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Chicot' and G.GAME.blind and G.GAME.blind.boss and not G.GAME.blind.disabled then"
position = "at" # before, after, or at
payload = """if self.ability.name == 'Chicot' and not self.debuff then
  if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
    blind_level_chicot_luchador("chicot created")
  end
end
if false then -- Old Chicot"""
match_indent = true

# Astronomer:
# Level 1: All planet cards and celestial packs are free
# Level 2: All planet/tarot cards and celestial/arcana packs are free
# Level 3: All consumables and booster packs are free
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if (self.ability.set == 'Planet' or (self.ability.set == 'Booster' and self.ability.name:find('Celestial'))) and #find_joker('Astronomer') > 0 then self.cost = 0 end"
position = "after" # before, after, or at
payload = """if (self.ability.set == 'Tarot' or (self.ability.set == 'Booster' and self.ability.name:find('Arcana'))) and (#find_joker('Astronomer') >= 1 and effect_level >= 2) then self.cost = 0 end
if (self.ability.set == 'Spectral' or self.ability.set == 'Booster') and (#find_joker('Astronomer') >= 1 and effect_level >= 3) then self.cost = 0 end
if (self.ability.set == 'Voucher' and self.ability.vouchertag) then self.cost = math.max(0, math.floor(self.cost * self.ability.vouchertag)) end"""
match_indent = true

# Smeared Joker:
# Level 1: vanilla
# Level 2: immune to suit-debuffing bosses
# Level 3: all suits are considered the same
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if next(find_joker('Smeared Joker')) and (self.base.suit == 'Hearts' or self.base.suit == 'Diamonds') == (suit == 'Hearts' or suit == 'Diamonds') then"
position = "before" # before, after, or at
payload = """if next(find_joker('Smeared Joker')) and effect_level >= 3 then
  return true
end"""
match_indent = true

# Marble Joker:
# Level 1: vanilla
# Level 2: adds a negative stone card
# Level 3: adds a negative stone card with seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card:start_materialize({G.C.SECONDARY_SET.Enhanced})"
position = "before" # before, after, or at
payload = """if effect_level >= 2 then
  card:set_edition({negative = true}, true)
end
if effect_level >= 3 then
  local seal_type = pseudorandom(pseudoseed('marsl'))
  if seal_type > 0.75 then card:set_seal('Red', true)
  elseif seal_type > 0.5 then card:set_seal('Blue', true)
  elseif seal_type > 0.25 then card:set_seal('Gold', true)
  else card:set_seal('Purple', true)
  end
end"""
match_indent = true

# Brainstorm
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local other_joker = G.jokers.cards[1]"
position = "after" # before, after, or at
payload = """if effect_level >= 2 then
  for i = 1, #G.jokers.cards do
    if G.jokers.cards[i] == self then other_joker = G.jokers.cards[i-1] end
  end
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "other_joker = G.jokers.cards[1]"
position = "after" # before, after, or at
payload = """if effect_level >= 2 then
  for i = 1, #G.jokers.cards do
    if G.jokers.cards[i] == self then other_joker = G.jokers.cards[i-1] end
  end
end"""
match_indent = true




# Previously, I hooked calculate_joker. Here is an attempt to fix this problem by putting all my code into lovely.toml instead.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = """if self.ability.set == "Joker" and not self.debuff then"""
position = "at" # before, after, or at
payload = """if self.ability.set == "Joker" and not self.debuff and context.cardarea == G.jokers and context.before and self.ability.name == 'DNA' and (G.GAME.current_round.hands_played == 0 or effect_level >= 3) then
    if #context.full_hand == 1 then
      local reps = 1
      if effect_level <= 2 then reps = effect_level
      elseif effect_level >= 3 then reps = effect_level-1
      end
      G.playing_card = (G.playing_card and G.playing_card + 1) or 1
        G.deck.config.card_limit = G.deck.config.card_limit + reps
        for i = 1, reps do
          local _card = copy_card(context.full_hand[1], nil, nil, G.playing_card)
          _card:add_to_deck()
          table.insert(G.playing_cards, _card)
          G.hand:emplace(_card)
          _card.states.visible = nil
          G.E_MANAGER:add_event(Event({
            func = function()
            _card:start_materialize()
            return true
          end
          }))
        delay(0.8)
        end
        return {
          message = localize('k_copied_ex'),
          colour = G.C.CHIPS,
          card = self,
          playing_cards_created = {true}
        }
      --end
    end
  elseif self.ability.set == "Joker" and not self.debuff and context.cardarea == G.play and context.repetition and self.ability.name == 'Seltzer' then
    return {
       message = localize('k_again_ex'),
       repetitions = math.floor(1 + (effect_level-1)*0.5),
       card = self
    }
  elseif self.ability.set == "Joker" and not self.debuff and context.cardarea == G.play and context.individual and self.ability.name == '8 Ball' and #G.consumeables.cards + G.GAME.consumeable_buffer < G.consumeables.config.card_limit then
    if (context.other_card:get_id() == 8) and (pseudorandom('8ball') < G.GAME.probabilities.normal/self.ability.extra) then
      G.GAME.consumeable_buffer = G.GAME.consumeable_buffer + 1
      return {
        extra = {focus = self, message = localize('k_plus_tarot'), func = (function()
          G.E_MANAGER:add_event(Event({
            trigger = 'before',
            delay = 0.0,
            func = (function()
              for i = 1, effect_level do
                if #G.consumeables.cards < G.consumeables.config.card_limit then
                  local card = create_card('Tarot', G.consumeables, nil, nil, nil, nil, nil, '8ba')
                  card:add_to_deck()
                  G.consumeables:emplace(card)
                  G.GAME.consumeable_buffer = 0
                end
              end
              return true end)}))
        end)},
        colour = G.C.SECONDARY_SET.Tarot,
        card = self
      }
    end
  elseif self.ability.set == "Joker" and not self.debuff and context.discard and self.ability.name == 'Trading Card' and not context.blueprint and #context.full_hand == 1 and (G.GAME.current_round.discards_used <= 0 or econ_level >= 3) then
    ease_dollars(self.ability.extra)
    G.hand.highlighted[1]:start_dissolve(nil, false)
    return {
      message = localize('$')..self.ability.extra,
      colour = G.C.MONEY,
      delay = 0.45, 
      card = self
    }
  elseif self.ability.set == "Joker" and not self.debuff and context.first_hand_drawn and self.ability.name == 'Certificate' then
    G.E_MANAGER:add_event(Event({
      func = function() 
      local enhancement = pseudorandom(pseudoseed('certen'))
      local _card = create_playing_card({
        front = pseudorandom_element(G.P_CARDS, pseudoseed('cert_fr')), center = G.P_CENTERS.c_base}, G.hand, nil, nil, {G.C.SECONDARY_SET.Enhanced})
      local seal_type = pseudorandom(pseudoseed('certsl'))
      local edition = pseudorandom(pseudoseed('certed'))
      if seal_type > 0.75 then _card:set_seal('Red', true)
      elseif seal_type > 0.5 then _card:set_seal('Blue', true)
      elseif seal_type > 0.25 then _card:set_seal('Gold', true)
      else _card:set_seal('Purple', true)
      end
      if edition >= 2/3 and effect_level >= 3 then _card:set_edition({holo = true}, true)
      elseif edition >= 1/3 and effect_level >= 3 then _card:set_edition({polychrome = true}, true)
      elseif edition >= 0/3 and effect_level >= 3 then _card:set_edition({foil = true}, true)
      end
      if effect_level >= 2 and enhancement >= (6*52)/364 then _card:set_ability(G.P_CENTERS.m_wild, nil, true)
      elseif effect_level >= 2 and enhancement >= (5*52)/364 then _card:set_ability(G.P_CENTERS.m_mult, nil, true)
      elseif effect_level >= 2 and enhancement >= (4*52)/364 then _card:set_ability(G.P_CENTERS.m_bonus, nil, true)
      elseif effect_level >= 2 and enhancement >= (3*52)/364 then _card:set_ability(G.P_CENTERS.m_gold, nil, true)
      elseif effect_level >= 2 and enhancement >= (2*52)/364 then _card:set_ability(G.P_CENTERS.m_glass, nil, true)
      elseif effect_level >= 2 and enhancement >= (1*52)/364 then _card:set_ability(G.P_CENTERS.m_steel, nil, true)
      elseif effect_level >= 2 and enhancement >= (0*52)/364 then _card:set_ability(G.P_CENTERS.m_lucky, nil, true)
      end
      G.GAME.blind:debuff_card(_card)
      G.hand:sort()
      if context.blueprint_card then context.blueprint_card:juice_up() else self:juice_up() end
      return true
      end}))
    playing_card_joker_effects({true})
  elseif self.ability.set == "Joker" and not self.debuff and context.ending_shop and self.ability.name == 'Perkeo' then
    if G.consumeables.cards[1] then
      for i = 1, math.max(1, effect_level-1) do
        G.E_MANAGER:add_event(Event({
          func = function() 
            local card = nil
            if effect_level == 1 then
              card = copy_card(pseudorandom_element(G.consumeables.cards, pseudoseed('perkeo')), nil)
            elseif effect_level >= 2 then
              card = copy_card(G.consumeables.cards[1])
            end
            card:set_edition({negative = true}, true)
            card:add_to_deck()
            G.consumeables:emplace(card) 
            return true
          end}))
        card_eval_status_text(context.blueprint_card or self, 'extra', nil, nil, nil, {message = localize('k_duplicated_ex')})
      end
      return
    end
  elseif self.ability.set == "Joker" and not self.debuff and context.setting_blind and not self.getting_sliced and self.ability.name == 'Chicot' and not context.blueprint then
    if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
      blind_level_chicot_luchador("chicot")
    end
  elseif self.ability.set == "Joker" and not self.debuff and context.selling_self and self.ability.name == 'Chicot' then
    if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
      blind_level_chicot_luchador("chicot sold")
    end
  elseif self.ability.set == "Joker" and not self.debuff and context.selling_self and self.ability.name == 'Luchador' and G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss')) then
    luchadors_sold = luchadors_sold + effect_level
  elseif self.ability.set == "Joker" and not self.debuff then"""
match_indent = true





# CONSUMABLES

# TAROTS

# Temperance
# Level 1: vanilla
# Level 2: gives 1.5X sell value, max $70
# Level 3: gives 2X sell value, max $90 etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.ability.money = math.min(self.ability.money, self.ability.extra)"
position = "at" # before, after, or at
payload = "self.ability.money = math.min(math.floor(self.ability.money*(1 + (tarot_level-1)/2)), self.ability.extra)"
match_indent = true

# Hermit
# Level 1: vanilla
# Level 2: gives 2.5X money, max $30
# Level 3: gives 3X money, max $40 etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ease_dollars(math.max(0,math.min(G.GAME.dollars, self.ability.extra)), true)"
position = "at" # before, after, or at
payload = "ease_dollars(math.max(0,math.min(math.floor(G.GAME.dollars * (2 + (tarot_level-1)/2)), self.ability.extra)), true)"
match_indent = true

# Wheel of Fortune
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = poll_edition('wheel_of_fortune', nil, true, true)"
position = "after" # before, after, or at
payload = """if tarot_level >= 3 then
  eligible_card = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if next(self.eligible_strength_jokers) then return true end"
position = "at" # before, after, or at
payload = """if tarot_level == 3 then
  if not G.jokers.cards[1].edition then return true end
elseif tarot_level <= 2 then
  if next(self.eligible_strength_jokers) then return true end
else
  return true
end"""
match_indent = true

# Death
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "for i=1, #G.hand.highlighted do if G.hand.highlighted[i].T.x > rightmost.T.x then rightmost = G.hand.highlighted[i] end end"
position = "after" # before, after, or at
payload = """if (rightmost.edition and rightmost.edition.negative) and (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED) then
  local negs = 0
  for i=1, #G.hand.highlighted do
    if G.hand.highlighted[i].edition and G.hand.highlighted[i].edition.negative then 
      negs = negs + 1
    end
  end
  G.hand:change_size((#G.hand.highlighted - negs)*G.P_CENTERS.e_negative.config.extra)
end"""
match_indent = true

# Strength
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self:calculate_joker{selling_self = true}"
position = "after" # before, after, or at
payload = """if self.ability.name == "Strength" and tarot_level >= 2 and G.hand.highlighted then
  for i=1, #G.hand.highlighted do
    local percent = 1.15 - (i-0.999)/(#G.hand.highlighted-0.998)*0.3
    G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.15,func = function() G.hand.highlighted[i]:flip();G.hand.highlighted[i]:juice_up(0.3, 0.3);return true end }))
    G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.1,func = function()
      local card = G.hand.highlighted[i]
      local suit_prefix = string.sub(card.base.suit, 1, 1)..'_'
      local rank_suffix = card.base.id == 2 and 14 or (card.base.id-1)
      if rank_suffix < 10 then rank_suffix = tostring(rank_suffix)
      elseif rank_suffix == 10 then rank_suffix = 'T'
      elseif rank_suffix == 11 then rank_suffix = 'J'
      elseif rank_suffix == 12 then rank_suffix = 'Q'
      elseif rank_suffix == 13 then rank_suffix = 'K'
      elseif rank_suffix == 14 then rank_suffix = 'A'
      end
      card:set_base(G.P_CARDS[suit_prefix..rank_suffix])
    return true end }))
  end
  delay(0.2)
  for i=1, #G.hand.highlighted do
    local percent = 0.85 + (i-0.999)/(#G.hand.highlighted-0.998)*0.3
    G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.15,func = function() G.hand.highlighted[i]:flip();G.hand.highlighted[i]:juice_up(0.3, 0.3);return true end }))
  end
  G.E_MANAGER:add_event(Event({trigger = 'after', delay = 0.2,func = function() G.hand:unhighlight_all(); return true end }))
  G.E_MANAGER:add_event(Event({
        trigger = 'immediate',
        func = function()
          G.E_MANAGER:add_event(Event({
            trigger = 'immediate',
            func = function()
              G.GAME.last_tarot_planet = self.config.center_key
              return true
            end
          }))
          return true
        end
      }))
  if self.area == G.pack_cards and G.GAME.pack_choices >= 1 then
    G.GAME.pack_choices = G.GAME.pack_choices - 1
    if G.GAME.pack_choices == 0 then
      G.FUNCS.end_consumeable(nil, delay_fac)
    end
  end
  delay(0.5)
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:can_sell_card(context)"
position = "after" # before, after, or at
payload = """if (self.ability.name == "Strength") and (tarot_level >= 2) and (#G.hand.highlighted >= tarot_level+2) then
  return false
elseif (self.ability.name == "Strength") and (tarot_level >= 2) and (self.area == G.pack_cards) and (#G.hand.highlighted == 0) then
  return false
elseif (self.ability.name == "Strength") and (tarot_level >= 2) and (#G.hand.highlighted <= tarot_level+1) then
  return true
end"""
match_indent = true

# PLANETS
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "level_up_hand(used_tarot, self.ability.consumeable.hand_type)"
position = "at" # before, after, or at
payload = "level_up_hand(used_tarot, self.ability.consumeable.hand_type, nil, planet_level)"
match_indent = true


# SPECTRALS

# General check of usability for higher-level Sigil, Ouija, and Immolate
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "and #G.hand.cards > 1 then"
position = "after" # before, after, or at
payload = """if (self.ability.name == 'Sigil' and spectral_level >= 2 and (G.hand and (#G.hand.highlighted == 0 or #G.hand.highlighted >= 2))) then
  return false
elseif (self.ability.name == 'Ouija' and spectral_level >= 3 and (G.hand and (#G.hand.highlighted == 0 or #G.hand.highlighted >= 2))) then
  return false
elseif (self.ability.name == 'Immolate' and spectral_level >= 2 and (G.hand and (#G.hand.highlighted == 0))) then
  return false
elseif (self.ability.name == 'Incantation' and spectral_level >= 2 and (G.hand and (#G.hand.highlighted == 0 or #G.hand.highlighted >= 2))) then 
  return false
elseif (self.ability.name == 'Familiar' and spectral_level >= 2 and (G.hand and (#G.hand.highlighted == 0 or #G.hand.highlighted >= 1+math.min(math.max(3, spectral_level), 5)))) then 
  return false
end
"""
match_indent = true

# Grim
# Level 1: vanilla
# Level 2: gives 1 tag
# Level 3: gives 2 tags etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'The Hermit' or self.ability.consumeable.hand_type or self.ability.name == 'Temperance' or self.ability.name == 'Black Hole' then"
position = "before" # before, after, or at
payload = """if self.ability.name == 'Grim' and spectral_level >= 2 then
  return true
end"""
match_indent = true

# Black Hole
# Level 1: vanilla
# Level 2: upgrades all poker hands by 3 levels
# Level 3: upgrades all poker hands by 5 levels etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "level_up_hand(self, k, true)"
position = "at" # before, after, or at
payload = "level_up_hand(self, k, true, (spectral_level*2)-1)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+1'})"
position = "at" # before, after, or at
payload = "update_hand_text({sound = 'button', volume = 0.7, pitch = 0.9, delay = 0}, {level='+'..((spectral_level*2)-1)})"
match_indent = true

# Cryptid
# Level 1: vanilla
# Level 2: creates 3 copies of card
# Level 3: creates 4 copies of card etc.
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "for i = 1, self.ability.extra do"
position = "at" # before, after, or at
payload = "for i = 1, spectral_level+1 do"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Cryptid' then"
position = "after" # before, after, or at
payload = """if (G.hand.highlighted[1].edition and G.hand.highlighted[1].edition.negative) and (G.STATE == G.STATES.TAROT_PACK or G.STATE == G.STATES.SPECTRAL_PACK or G.STATE == G.STATES.SMODS_BOOSTER_OPENED) then
  G.hand:change_size((spectral_level+1)*G.P_CENTERS.e_negative.config.extra)
end"""
match_indent = true

# Aura
# Level 1: vanilla
# Level 2: editions on 2 cards
# Level 3: editions on 3 cards, editions can be overwritten
# Level 4: editions on 4 cards
# Level 5: editions on 5 cards
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if G.hand and (#G.hand.highlighted == 1) and G.hand.highlighted[1] and (not G.hand.highlighted[1].edition) then return true end"
position = "at" # before, after, or at
payload = """if spectral_level == 1 then
  if G.hand and (#G.hand.highlighted == 1) and G.hand.highlighted[1] and (not G.hand.highlighted[1].edition) then return true end
elseif spectral_level == 2 then
  if G.hand and ((#G.hand.highlighted == 1) and G.hand.highlighted[1] and (not G.hand.highlighted[1].edition)) or ((#G.hand.highlighted == 2) and (G.hand.highlighted[1] and (not G.hand.highlighted[1].edition)) and (G.hand.highlighted[2] and (not G.hand.highlighted[2].edition))) then return true end
else
  if G.hand and (#G.hand.highlighted <= spectral_level) and G.hand.highlighted[1] then return true end
end 
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "aura_card:set_edition(edition, true)"
position = "before" # before, after, or at
payload = """for i = 1, #G.hand.highlighted, 1 do
  edition = poll_edition('aura', nil, true, true)
  aura_card = G.hand.highlighted[i]
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "aura_card:set_edition(edition, true)"
position = "after" # before, after, or at
payload = "end"
match_indent = true

# Wraith
# Level 1: vanilla
# Level 2: money set to 33%
# Level 3: money set to 67%
# Level 4: money doesn't decrease at all
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if G.GAME.dollars ~= 0 then"
position = "at" # before, after, or at
payload = "if G.GAME.dollars ~= 0 and spectral_level <= 4 then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ease_dollars(-G.GAME.dollars, true)"
position = "at" # before, after, or at
payload = """if spectral_level <= 3 then
  ease_dollars(-G.GAME.dollars*(math.floor(1 - (spectral_level-1)/3)), true)
end"""
match_indent = true

# Ectoplasm
# Level 1: vanilla
# Level 2: no longer reduces hand size
# Level 3: always selects leftmost joker
# Level 4: negative can override other editions
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = {negative = true}"
position = "after" # before, after, or at
payload = """if spectral_level >= 3 then
  eligible_card = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(-G.GAME.ecto_minus)"
position = "at" # before, after, or at
payload = """if spectral_level == 1 then
  G.hand:change_size(-G.GAME.ecto_minus)
end"""
match_indent = true

# Ankh
# Level 1: vanilla
# Level 2: no longer destroys other jokers
# Level 3: always selects leftmost joker
# Level 4: no longer removes negative from copies
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local chosen_joker = pseudorandom_element(G.jokers.cards, pseudoseed('ankh_choice'))"
position = "after" # before, after, or at
payload = """if spectral_level >= 3 then
  chosen_joker = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "card:set_edition(nil, true)"
position = "at" # before, after, or at
payload = "if spectral_level <= 3 then card:set_edition(nil, true) end"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = copy_card(chosen_joker, nil, nil, nil, chosen_joker.edition and chosen_joker.edition.negative)"
position = "at" # before, after, or at
payload = "local card = copy_card(chosen_joker, nil, nil, nil, false)"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.E_MANAGER:add_event(Event({trigger = 'before', delay = 0.75, func = function()"
position = "before" # before, after, or at
payload = "if spectral_level == 1 then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.E_MANAGER:add_event(Event({trigger = 'before', delay = 0.4, func = function()"
position = "before" # before, after, or at
payload = """    if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
      blind_level_chicot_luchador("ankh")
     end
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if #G.jokers.cards >= G.jokers.config.card_limit then"
position = "at" # before, after, or at
payload = "if ((#G.jokers.cards >= G.jokers.config.card_limit) and (spectral_level <= 3)) or ((#G.jokers.cards >= G.jokers.config.card_limit) and (spectral_level >= 4) and (not (G.jokers.cards[1].edition and G.jokers.cards[1].edition.negative))) then"
match_indent = true

# Hex
# Level 1: vanilla
# Level 2: no longer destroys other jokers
# Level 3: always selects leftmost joker
# Level 4: polychrome can override other editions
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Hex' then"
position = "at" # before, after, or at
payload = "if self.ability.name == 'Hex' and spectral_level == 1 then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "edition = {polychrome = true}"
position = "after" # before, after, or at
payload = """if spectral_level >= 3 then
  eligible_card = G.jokers.cards[1]
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if v ~= eligible_card and (not v.ability.eternal) then v:start_dissolve(nil, _first_dissolve);_first_dissolve = true end"
position = "after" # before, after, or at
payload = """end
if true then
    if not (G.GAME.blind and ((not G.GAME.blind.disabled) and (G.GAME.blind:get_type() == 'Boss'))) then
      blind_level_chicot_luchador("hex")
    end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if next(self.eligible_editionless_jokers) then return true end"
position = "at" # before, after, or at
payload = """if spectral_level == 3 then
  if not G.jokers.cards[1].edition then return true end
elseif spectral_level <= 2 then
  if next(self.eligible_editionless_jokers) then return true end
else
  return true
end"""
match_indent = true


# ENHANCEMENTS

# Wild Card
# Level 2: immune to debuffs
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.suit and card:is_suit(self.debuff.suit, true) then"
position = "at" # before, after, or at
payload = "if self.debuff.suit and card:is_suit(self.debuff.suit, true) and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or (next(find_joker('Smeared Joker')) and effect_level >= 2 and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window')) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.is_face =='face' and card:is_face(true) then"
position = "at" # before, after, or at
payload = "if self.debuff.is_face =='face' and card:is_face(true) and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or (next(find_joker('Pareidolia')) and effect_level >= 2 and (G.GAME.blind.name == 'The Plant')) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Pillar' and card.ability.played_this_ante then"
position = "at" # before, after, or at
payload = "if self.name == 'The Pillar' and card.ability.played_this_ante and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.value and self.debuff.value == card.base.value then"
position = "at" # before, after, or at
payload = "if self.debuff.value and self.debuff.value == card.base.value and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.debuff.nominal and self.debuff.nominal == card.base.nominal then"
position = "at" # before, after, or at
payload = "if self.debuff.nominal and self.debuff.nominal == card.base.nominal and not ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'Crimson Heart' and not self.disabled and card.area == G.jokers then"
position = "before" # before, after, or at
payload = """if self.name == 'Verdant Leaf' and not self.disabled and card.area ~= G.jokers then
  if ((card.ability.name == 'Wild Card' and enhance_level >= 2) or blind_level <= 0) then
    card:set_debuff(false)
    return
  else
    card:set_debuff(true)
    if card.debuff then card.debuffed_by_blind = true end
    return
  end
end"""
match_indent = true

# Lucky Card
# Level 1: vanilla
# Level 2: 1/4 to give +24 mult, 1/13 to give $25
# Level 3: 1/3 to give +28 mult, 1/11 to give $30
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/5 then"
position = "at" # before, after, or at
payload = "if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/math.max(1, (5 - 0.5*(enhance_level-1))) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/15 then"
position = "at" # before, after, or at
payload = "if pseudorandom('lucky_money') < G.GAME.probabilities.normal/math.max(1, (15 - 1*(enhance_level-1))) then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.p_dollars > 0 then"
position = "after" # before, after, or at
payload = """if self.ability.effect == 'Lucky Card' and self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if pseudorandom('lucky_money') < G.GAME.probabilities.normal/math.max(1, (15 - 2*(enhance_level-1))) then
    ret = ret -  self.ability.p_dollars
    return ret
  end
elseif self.debuff then
  return 0
end"""
match_indent = true


# SEALS (edition_level is for both editions and seals)

# Blue Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card(card_type,G.consumeables, nil, nil, nil, nil, _planet, 'blusl')"
position = "before" # before, after, or at
payload = """for i = 1, edition_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Purple Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local card = create_card('Tarot',G.consumeables, nil, nil, nil, nil, nil, '8ba')"
position = "before" # before, after, or at
payload = """for i = 1, edition_level do
if #G.consumeables.cards < G.consumeables.config.card_limit then"""
match_indent = true

# Red Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "repetitions = 1,"
position = "at" # before, after, or at
payload = "repetitions = math.floor(1 + (edition_level-1)*0.5),"
match_indent = true

# Gold Seal
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "ret = ret +  3"
position = "at" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  ret = ret -  (3 + (2*(edition_level-1)))
elseif self.debuff then
  return 0
else
  ret = ret +  (3 + (2*(edition_level-1)))
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "local ret = 0"
position = "before" # before, after, or at
payload = "end"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_p_dollars()"
position = "after" # before, after, or at
payload = "if false then"
match_indent = true


# BLINDS

# Scaling: trying to hook led to performing arithmetic on nil value error, so I had to overwrite instead
# Ante score requirements has been capped out at 9.9e306, since that is the highest value that wouldn't cause naneinf with Level 4 Violet Vessel.
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "function Blind:change_colour(blind_col)"
position = "before" # before, after, or at
payload = """get_blind_amount_ref = get_blind_amount
function get_blind_amount(ante)
  if blind_level ~= nil then
    local amounts = {300, 800, 2000, 5000, 11000, 20000, 35000, 50000}
    if blind_level_old <= 1 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {300, 800, 2000, 5000, 11000, 20000, 35000, 50000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {300, 900, 2600, 8000, 20000, 36000, 60000, 100000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {300, 1000, 3200, 9000, 25000, 60000, 110000, 200000}
      end
      local k = 0.75
      if ante == -2 then return 2 end
      if ante == -1 then return 20 end
      if ante == 0 then return 100 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 9.9 * (10^306) end
      return amount
    elseif blind_level_old == 2 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {540, 1200, 3500, 10000, 27000, 65000, 150000, 400000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {540, 1500, 5000, 14000, 48000, 130000, 450000, 1200000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {540, 1800, 6500, 23000, 75000, 350000, 1000000, 3600000}
      end
      local k = 0.75
      if ante <= -3 then return 2 end
      if ante == -2 then return 16 end
      if ante == -1 then return 50 end
      if ante == 0 then return 160 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 9.9 * (10^306) end
      return amount
    elseif blind_level_old == 3 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {840, 2600, 8000, 27000, 87000, 300000, 950000, 3500000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {840, 3300, 13000, 56000, 220000, 900000, 3500000, 14000000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {840, 4000, 18000, 88000, 420000, 2100000, 11000000, 56000000}
      end
      local k = 0.75
      if ante <= -3 then return 2 end
      if ante <= -3 then return 14 end
      if ante == -2 then return 48 end
      if ante == -1 then return 120 end
      if ante == 0 then return 400 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 9.9 * (10^306) end
      return amount
    elseif blind_level_old >= 4 then
      if not G.GAME.modifiers.scaling or G.GAME.modifiers.scaling == 1 then 
        amounts = {1200, 6000, 25000, 110000, 480000, 2000000, 8500000, 36000000}
      elseif G.GAME.modifiers.scaling == 2 then
        amounts = {1200, 7000, 35000, 180000, 950000, 5600000, 32000000, 180000000}
      elseif G.GAME.modifiers.scaling == 3 then
        amounts = {1200, 8000, 45000, 300000, 2000000, 15000000, 120000000, 900000000}
      end
      local k = 0.75
      if ante <= -4 then return 2 end
      if ante <= -3 then return 12 end
      if ante == -2 then return 48 end
      if ante == -1 then return 150 end
      if ante == 0 then return 480 end
      if ante <= 8 then return amounts[ante] end
      local a, b, c, d = amounts[8],1.6,ante-8, 1 + 0.2*(ante-8)
      local amount = math.floor(a*(b+(k*c)^d)^c)
      amount = amount - amount%(10^math.floor(math.log10(amount)-1))
      if amount ~= amount then return 9.9 * (10^306) end
      return amount
    end
  else
    get_blind_amount_ref(ante)
  end
end
"""
match_indent = true


# Blind levels require a massive overhaul to the system of disabling blinds
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "v.ability.crimson_heart_chosen = nil"
position = "at" # before, after, or at
payload = "if false then end"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.GAME.blind:load(saveTable.BLIND)"
position = "after" # before, after, or at
payload = """if saveTable.BLIND.name == 'Cerulean Bell' and blind_level >= 2 then
  for i = 1, #G.hand.cards do
    G.hand.cards[i].ability.forced_selection = nil
  end
  G.hand:unhighlight_all()
  for i = 1, #G.hand.cards do
    if G.hand.cards[i].cerulean1 then
      G.hand.cards[i].ability.forced_selection = true
      G.hand:add_to_highlighted(G.hand.cards[i])
    elseif G.hand.cards[i].cerulean2 then
      G.hand.cards[i].ability.forced_selection = true
      G.hand:add_to_highlighted(G.hand.cards[i])
    end
  end
end"""
match_indent = true

# Blind level changes mid-blind
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "function Blind:set_blind(blind, reset, silent)"
position = "after" # before, after, or at
payload = """  local prev_level = blind_level
  blind_level_chicot_luchador("set blind")
  self:set_text()
  if out_of_blind == 0 and prev_level ~= blind_level then

    function wall(level)
      if level >= 0 then
        return level + 1
      elseif level <= -1 then
        return (2^level)
      end
    end

    function vessel(level)
      if level >= 0 then
        return (level*2) + 1
      elseif level <= -1 then
        return (3^level)
      end
    end

    if self.name == 'The Water' then
      ease_discard(math.min(G.GAME.round_resets.discards, prev_level) - math.min(G.GAME.round_resets.discards, blind_level))
    elseif self.name == 'The Needle' then
      ease_hands_played(math.min(G.GAME.round_resets.hands - 1, prev_level) - math.min(G.GAME.round_resets.hands - 1, blind_level))
    elseif self.name == 'The Manacle' then
      G.hand:change_size(math.min(2, prev_level) - math.min(2, blind_level))
      global_hand_size = global_hand_size + (math.min(2, prev_level) - math.min(2, blind_level))
    elseif self.name == 'The Wall' then
      self.chips = (self.chips / wall(prev_level) * wall(blind_level))
      self.chip_text = number_format(self.chips)
    elseif self.name == 'Violet Vessel' then
      self.chips = (self.chips / vessel(prev_level) * vessel(blind_level))
      self.chip_text = number_format(self.chips)
    elseif (self.name == 'The Wheel' or self.name == 'The House' or self.name == 'The Mark' or self.name == 'The Fish') and blind_level >= 1 then 
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].facing == 'front' then
          if self.name == 'The Wheel' and G.hand.cards[i].wheel then
            G.hand.cards[i]:flip()
          elseif self.name == 'The House' and G.hand.cards[i].wheel then
            G.hand.cards[i]:flip()
          elseif self.name == 'The Mark' and G.hand.cards[i]:is_face(true) then
            G.hand.cards[i]:flip()
          elseif self.name == 'The Fish' and G.hand.cards[i].wheel then 
            G.hand.cards[i]:flip()
          end
        end
      end
    elseif (self.name == 'The Wheel' or self.name == 'The House' or self.name == 'The Mark' or self.name == 'The Fish') and blind_level <= 0 then 
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].facing == 'back' then
          G.hand.cards[i]:flip()
        end
      end
    elseif self.name == 'Amber Acorn' and blind_level <= 0 then
      for k, v in ipairs(G.jokers.cards) do
        if v.facing == 'back' then v:flip() end
      end
    elseif self.name == 'Amber Acorn' and blind_level >= 1 then
      G.jokers:unhighlight_all()
      for k, v in ipairs(G.jokers.cards) do
        v:flip()
      end
      if #G.jokers.cards > 1 then 
        G.E_MANAGER:add_event(Event({ trigger = 'after', delay = 0.2, func = function() 
          G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 0.85);return true end })) 
          delay(0.15)
          G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 1.15);return true end })) 
          delay(0.15)
          G.E_MANAGER:add_event(Event({ func = function() G.jokers:shuffle('aajk'); play_sound('cardSlide1', 1);return true end })) 
          delay(0.5)
        return true end })) 
      end
    elseif self.name == 'Cerulean Bell' and blind_level <= 0 then
      for i = 1, #G.hand.cards do
        G.hand.cards[i].ability.forced_selection = nil
      end
      G.hand:unhighlight_all()
    elseif self.name == 'Cerulean Bell' and blind_level == 1 then
      for i = 1, #G.hand.cards do
        G.hand.cards[i].ability.forced_selection = nil
      end
      G.hand:unhighlight_all()
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].cerulean1 then
          G.hand.cards[i].ability.forced_selection = true
          G.hand:add_to_highlighted(G.hand.cards[i])
        end
      end
    elseif self.name == 'Cerulean Bell' and blind_level >= 2 and prev_level <= 1 then 
      for i = 1, #G.hand.cards do
        G.hand.cards[i].ability.forced_selection = nil
      end
      G.hand:unhighlight_all()
      for i = 1, #G.hand.cards do
        if G.hand.cards[i].cerulean1 then
          G.hand.cards[i].ability.forced_selection = true
          G.hand:add_to_highlighted(G.hand.cards[i])
        elseif G.hand.cards[i].cerulean2 then
          G.hand.cards[i].ability.forced_selection = true
          G.hand:add_to_highlighted(G.hand.cards[i])
        end
      end
    elseif self.name == 'Crimson Heart' and blind_level <= 0 then
      for i = 1, #G.jokers.cards do
        G.jokers.cards[i].ability.crimson_heart_chosen = nil
        self:debuff_card(G.jokers.cards[i], false)
        SMODS.recalc_debuff(G.jokers.cards[i])
      end
    elseif self.name == 'Crimson Heart' and blind_level == 1 then
      for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].crimson1 then
          G.jokers.cards[i].ability.crimson_heart_chosen = true
          self:debuff_card(G.jokers.cards[i], true)
        elseif G.jokers.cards[i].crimson2 then
          G.jokers.cards[i].ability.crimson_heart_chosen = nil
          self:debuff_card(G.jokers.cards[i], false)
        end
        SMODS.recalc_debuff(G.jokers.cards[i])
      end
    elseif self.name == 'Crimson Heart' and blind_level >= 2 then
      for i = 1, #G.jokers.cards do
        if G.jokers.cards[i].crimson1 or G.jokers.cards[i].crimson2 then
          G.jokers.cards[i].ability.crimson_heart_chosen = true
          self:debuff_card(G.jokers.cards[i], true)
          SMODS.recalc_debuff(G.jokers.cards[i])
        end
      end
    end

    G.E_MANAGER:add_event(Event({
      trigger = 'immediate',
      func = function()
      if self.boss and G.GAME.chips - G.GAME.blind.chips >= 0 then
        G.STATE = G.STATES.NEW_ROUND
        G.STATE_COMPLETE = false
      end
      return true
    end
    }))
    
  end
  out_of_blind = out_of_blind * 0"""
match_indent = true

# Cancel out existing Manacle correction
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Manacle' and not self.disabled then"
position = "at" # before, after, or at
payload = "if false then"
match_indent = true

# New corrections for blind defeat
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "function Blind:defeat(silent)"
position = "after" # before, after, or at
payload = """if G.GAME.blind:get_type() == 'Boss' then
  luchadors_sold = 0
end
out_of_blind = 1
for i=1, #G.playing_cards do
  G.playing_cards[i].wheel = nil
  G.playing_cards[i].cerulean1 = nil
  G.playing_cards[i].cerulean2 = nil
end
for i=1, #G.jokers.cards do
  G.jokers.cards[i].crimson1 = nil
  G.jokers.cards[i].crimson2 = nil
end
if self.name == 'The Manacle' and not self.disabled then 
  G.hand:change_size(math.min(2, blind_level))
  global_hand_size = global_hand_size + math.min(2, blind_level)
end
blind_level_chicot_luchador("defeat blind")"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "function Game:start_run(args)"
position = "after" # before, after, or at
payload = "luchadors_sold = 0"
match_indent = true

# The Hook
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "for i = 1, 2 do"
position = "at" # before, after, or at
payload = "for i = 1, (blind_level+1) do"
match_indent = true

# The Tooth
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_dollars(-1)"
position = "at" # before, after, or at
payload = """ease_dollars(-blind_level)
G.GAME.blind.triggered = true"""
match_indent = true

# The Water
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_discard(-self.discards_sub)"
position = "at" # before, after, or at
payload = "ease_discard(-math.min(self.discards_sub, blind_level))"
match_indent = true

# The Needle
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_hands_played(-self.hands_sub)"
position = "at" # before, after, or at
payload = "ease_hands_played(-math.min(self.hands_sub, blind_level))"
match_indent = true

# The Arm
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "level_up_hand(self.children.animatedSprite, handname, nil, -1)"
position = "at" # before, after, or at
payload = """if blind_level ~= 0 then
  level_up_hand(self.children.animatedSprite, handname, nil, math.max(-G.GAME.hands[handname].level+1, -blind_level))
  G.GAME.blind.triggered = true
end"""
match_indent = true

# The Manacle
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "G.hand:change_size(-1)"
position = "at" # before, after, or at
payload = """G.hand:change_size(math.max(-2, -blind_level))
global_hand_size = global_hand_size + math.max(-2, -blind_level)"""
match_indent = true

# Level 2+ debuff bosses now not only debuff cards, but reverse them
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_bonus()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.ability.effect == 'Stone Card' or self.config.center.replace_base_card then
    return -(self.ability.bonus + (self.ability.perma_bonus or 0))
  end
  return -(self.base.nominal + self.ability.bonus + (self.ability.perma_bonus or 0))
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_mult()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.ability.set == 'Joker' then return 0 end
  if self.ability.effect == "Lucky Card" then 
    if pseudorandom('lucky_mult') < G.GAME.probabilities.normal/math.max(1, (5 - (enhance_level-1))) then
      self.lucky_trigger = true
      return -self.ability.mult
    else
      return 0
    end
  else  
    return -self.ability.mult
  end
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_x_mult(context)"
position = "after" # before, after, or at
payload = """if self.ability.x_mult == nil then self.ability.x_mult = 0 end
if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 and not (self.ability.x_mult == 0) then
  if self.ability.set == 'Joker' then return 0 end  
  return math.floor(100/self.ability.x_mult)/100
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_h_mult()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.ability.set == 'Joker' then return 0 end  
  return -self.ability.h_mult
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_chip_h_x_mult()"
position = "after" # before, after, or at
payload = """if self.ability.h_x_mult == nil then self.ability.h_x_mult = 0 end
if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 and not (self.ability.h_x_mult == 0) then
  if self.ability.set == 'Joker' then return 0 end  
  return math.floor(100/self.ability.h_x_mult)/100
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_edition()"
position = "before" # before, after, or at
payload = """function Card:get_chip_x_chips()
    if self.ability.x_chips == nil then self.ability.x_chips = 0 end
    if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 and not (self.ability.x_chips == 0) then
      return math.floor(100/self.ability.x_chips)/100
    elseif self.debuff then return 0 end
    return self.ability.x_chips
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "function Card:get_edition()"
position = "after" # before, after, or at
payload = """if self.debuff and (G.GAME.blind.name == 'The Club' or G.GAME.blind.name == 'The Plant' or G.GAME.blind.name == 'The Goad' or G.GAME.blind.name == 'The Window' or G.GAME.blind.name == 'The Head' or G.GAME.blind.name == 'The Pillar' or G.GAME.blind.name == 'Verdant Leaf') and blind_level >= 2 then
  if self.edition then
        local ret = {card = self}
        if self.edition.p_dollars then
            ret.p_dollars_mod = -self.edition.p_dollars
        end
        if self.edition.x_mult then 
            ret.x_mult_mod = math.floor(100/self.edition.x_mult)/100
        end
        if self.edition.mult then 
            ret.mult_mod = -self.edition.mult
        end
        if self.edition.chips then 
            ret.chip_mod = -self.edition.chips
        end
        return ret
    end

end"""
match_indent = true

# Verdant Leaf
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.set == 'Joker' and G.GAME.blind and G.GAME.blind.name == 'Verdant Leaf' then"
position = "after" # before, after, or at
payload = """if blind_level >= 1 and not (self.ability.name == "Luchador") then
  luchadors_sold = luchadors_sold + 1
  blind_level_chicot_luchador(text)
elseif false then"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.E_MANAGER:add_event(Event({trigger = 'after',delay = 0.3, blocking = false,"
position = "before" # before, after, or at
payload = "end"
match_indent = true

# The Ox
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "ease_dollars(-G.GAME.dollars, true)"
position = "at" # before, after, or at
payload = """if blind_level ~= 0 then
  ease_dollars(G.GAME.dollars*math.max(-1, (blind_level*-1)))
end"""
match_indent = true

# Amber Acorn
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'Amber Acorn' and not reset and #G.jokers.cards > 0 then"
position = "at" # before, after, or at
payload = "if self.name == 'Amber Acorn' and not (blind_level <= 0) and not reset and #G.jokers.cards > 0 then"
match_indent = true

# The Flint
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "return math.max(math.floor(mult*0.5 + 0.5), 1), math.max(math.floor(hand_chips*0.5 + 0.5), 0), true"
position = "at" # before, after, or at
payload = """if blind_level >= 1 then
  return math.max(math.floor(mult/(blind_level+1) + 0.5), 1), math.max(math.floor(hand_chips/(blind_level+1) + 0.5), 0), true
elseif blind_level <= -1 then
  return math.max(math.floor(mult*(-blind_level+1) + 0.5), 1), math.max(math.floor(hand_chips*(-blind_level+1) + 0.5), 0), true
end
"""
match_indent = true

# The Wheel
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Wheel' and pseudorandom(pseudoseed('wheel')) < G.GAME.probabilities.normal/7 then"
position = "at" # before, after, or at
payload = """if self.name == 'The Wheel' and blind_level >= 1 and pseudorandom(pseudoseed('wheel')) < G.GAME.probabilities.normal/math.max(1, 8-blind_level) then
  card.wheel = true"""
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "local disp_text = (self.config.blind.name == 'The Wheel' and G.GAME.probabilities.normal or '')..self.loc_debuff_text"
position = "at" # before, after, or at
payload = "local disp_text = self.loc_debuff_text"
match_indent = true

# The Fish
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Fish' and self.prepped then"
position = "at" # before, after, or at
payload = """if self.name == 'The Fish' and blind_level >= 1 and self.prepped then
  card.wheel = true"""
match_indent = true

# The Mark
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The Mark' and card:is_face(true) then"
position = "at" # before, after, or at
payload = "if self.name == 'The Mark' and blind_level >= 1 and card:is_face(true) and not (next(find_joker('Pareidolia')) and effect_level >= 2) then"
match_indent = true

# The House
[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = "if self.name == 'The House' and G.GAME.current_round.hands_played == 0 and G.GAME.current_round.discards_used == 0 then"
position = "at" # before, after, or at
payload = """if self.name == 'The House' and blind_level >= 1 and (G.GAME.current_round.hands_played == 0 and G.GAME.current_round.discards_used == 0) then
  card.wheel = true"""
match_indent = true

# Psychic, Eye, Mouth
[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if G.GAME.blind and G.boss_throw_hand and self.STATE == self.STATES.SELECTING_HAND then"
position = "at" # before, after, or at
payload = "if G.GAME.blind and G.boss_throw_hand and blind_level >= 1 and (self.STATE == self.STATES.SELECTING_HAND) then"
match_indent = true


# TAGS

# Uncommon and Rare tags
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "elseif _context.type == 'store_joker_create' then"
position = "after" # before, after, or at
payload = """if tag_level >= 2 then
  local card = nil
  if self.name == 'Rare Tag' then
    local rares_in_posession = {0}
    for k, v in ipairs(G.jokers.cards) do
      if v.config.center.rarity == 3 and not rares_in_posession[v.config.center.key] then
        rares_in_posession[1] = rares_in_posession[1] + 1 
        rares_in_posession[v.config.center.key] = true
      end
    end
    if #G.P_JOKER_RARITY_POOLS[3] > rares_in_posession[1] then 
      self:yep('+', G.C.RED,function() 
        for i=1, tag_level do
          card = create_card('Joker', _context.area, nil, 1, nil, nil, nil, 'rta')
          create_shop_card_ui(card, 'Joker', _context.area)
          card.states.visible = false
          card.ability.couponed = true
          card:start_materialize()
          _context.area:emplace(card)
          card:set_cost()
        end
        return true
      end)
    else
      self:nope()
    end
    self.triggered = true
  elseif self.name == 'Uncommon Tag' then
    self:yep('+', G.C.GREEN,function() 
      for i=1, tag_level do
        card = create_card('Joker', _context.area, nil, 0.9, nil, nil, nil, 'uta')
        create_shop_card_ui(card, 'Joker', _context.area)
        card.states.visible = false
        card.ability.couponed = true
        card:start_materialize()
        _context.area:emplace(card)
        card:set_cost()
      end
      return true
    end)
  end
  self.triggered = true
  G.shop_jokers.T.w = math.min(4, G.GAME.shop.joker_max+tag_level)*1.01*G.CARD_W
  G.shop:recalculate()
  return card
elseif tag_level == 1 then
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "elseif _context.type == 'shop_start' then"
position = "before" # before, after, or at
payload = "end"
match_indent = true

# Edition tags
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "_context.card:set_edition({foil = true}, true)"
position = "after" # before, after, or at
payload = """if tag_level >= 2 then
  for i=1, tag_level-1 do
    local card2 = create_card('Joker', G.shop_jokers, nil, nil, nil, nil, nil, 'uta')
    create_shop_card_ui(card2, 'Joker', G.shop_jokers)
    card2.states.visible = false
    card2.ability.couponed = true
    card2:set_edition({foil = true}, true)
    card2:start_materialize()
    G.shop_jokers:emplace(card2)
    card2:set_cost()
  end
  G.shop_jokers.T.w = math.min(4, G.GAME.shop.joker_max+tag_level)*1.01*G.CARD_W
  G.shop:recalculate()
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "_context.card:set_edition({holo = true}, true)"
position = "after" # before, after, or at
payload = """if tag_level >= 2 then
  for i=1, tag_level-1 do
    local card2 = create_card('Joker', G.shop_jokers, nil, nil, nil, nil, nil, 'uta')
    create_shop_card_ui(card2, 'Joker', G.shop_jokers)
    card2.states.visible = false
    card2.ability.couponed = true
    card2:set_edition({holo = true}, true)
    card2:start_materialize()
    G.shop_jokers:emplace(card2)
    card2:set_cost()
  end
  G.shop_jokers.T.w = math.min(4, G.GAME.shop.joker_max+tag_level)*1.01*G.CARD_W
  G.shop:recalculate()
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "_context.card:set_edition({polychrome = true}, true)"
position = "after" # before, after, or at
payload = """if tag_level >= 2 then
  for i=1, tag_level-1 do
    local card2 = create_card('Joker', G.shop_jokers, nil, nil, nil, nil, nil, 'uta')
    create_shop_card_ui(card2, 'Joker', G.shop_jokers)
    card2.states.visible = false
    card2.ability.couponed = true
    card2:set_edition({polychrome = true}, true)
    card2:start_materialize()
    G.shop_jokers:emplace(card2)
    card2:set_cost()
  end
  G.shop_jokers.T.w = math.min(4, G.GAME.shop.joker_max+tag_level)*1.01*G.CARD_W
  G.shop:recalculate()
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "_context.card:set_edition({negative = true}, true)"
position = "after" # before, after, or at
payload = """if tag_level >= 2 then
  for i=1, tag_level-1 do
    local card2 = create_card('Joker', G.shop_jokers, nil, nil, nil, nil, nil, 'uta')
    create_shop_card_ui(card2, 'Joker', G.shop_jokers)
    card2.states.visible = false
    card2.ability.couponed = true
    card2:set_edition({negative = true}, true)
    card2:start_materialize()
    G.shop_jokers:emplace(card2)
    card2:set_cost()
  end
  G.shop_jokers.T.w = math.min(4, G.GAME.shop.joker_max+tag_level)*1.01*G.CARD_W
  G.shop:recalculate()
end"""
match_indent = true

# Double Tag: gives 2 / 3 / 4 copies of tags
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "add_tag(Tag(_context.tag.key))"
position = "before" # before, after, or at
payload = "for i = 1, tag_level do"
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "add_tag(Tag(_context.tag.key))"
position = "after" # before, after, or at
payload = "end"
match_indent = true

# Economy Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "ease_dollars(math.min(self.config.max, math.max(0,G.GAME.dollars)), true)"
position = "at" # before, after, or at
payload = "ease_dollars(math.min(self.config.max, math.max(0, math.floor(G.GAME.dollars * (1 + (tag_level-1)/2)))), true)"
match_indent = true

# D6 Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "G.GAME.round_resets.temp_reroll_cost = 0"
position = "after" # before, after, or at
payload = "G.GAME.current_round.free_rerolls = G.GAME.current_round.free_rerolls + effect_level"
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "G.GAME.round_resets.temp_reroll_cost = 0"
position = "at" # before, after, or at
payload = "G.GAME.round_resets.temp_reroll_cost = 2 - blind_level_old"
match_indent = true

# Top-up Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local card = create_card('Joker', G.jokers, nil, 0, nil, nil, nil, 'top')"
position = "before" # before, after, or at
payload = """local card = nil
if tag_level == 1 then
  card = create_card('Joker', G.jokers, nil, 0, nil, nil, nil, 'top')"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local card = create_card('Joker', G.jokers, nil, 0, nil, nil, nil, 'top')"
position = "at" # before, after, or at
payload = """elseif tag_level >= 2 then
  card = create_card('Joker', G.jokers, nil, nil, nil, nil, nil, 'top')
end"""
match_indent = true

# Voucher Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "G.ARGS.voucher_tag = G.ARGS.voucher_tag or {}"
position = "before" # before, after, or at
payload = "for i = 1, tag_level do"
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "G.ARGS.voucher_tag = nil"
position = "before" # before, after, or at
payload = "end"
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "G.shop_vouchers:emplace(card)"
position = "before" # before, after, or at
payload = """card.ability.vouchertag = math.max(0, 1 - 0.2*(tag_level-1))
card:set_cost()"""
match_indent = true

# Reset packs after tag used
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "G.FUNCS.use_card({config = {ref_table = card}})"
position = "after" # before, after, or at
payload = """G.P_CENTERS.p_arcana_mega_1.config.extra = math.floor(5+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_arcana_mega_1.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_arcana_mega_2.config.extra = math.floor(5+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_arcana_mega_2.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_celestial_mega_1.config.extra = math.floor(5+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_celestial_mega_1.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_celestial_mega_2.config.extra = math.floor(5+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_celestial_mega_2.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_standard_mega_1.config.extra = math.floor(5+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_standard_mega_1.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_standard_mega_2.config.extra = math.floor(5+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_standard_mega_2.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_buffoon_mega_1.config.extra = math.floor(5+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_buffoon_mega_1.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_spectral_normal_1.config.extra = math.floor(2+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_spectral_normal_1.config.choose = math.floor(1 + ((pack_level-1) * (1/3)))
G.P_CENTERS.p_spectral_mega_1.config.extra = math.floor(4+(2/3) + ((pack_level-1) * (2/3)))
G.P_CENTERS.p_spectral_mega_1.config.choose = math.floor(2 + ((pack_level-1) * (1/3)))
"""
match_indent = true

# Charm Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local key = 'p_arcana_mega_'..(math.random(1,2))"
position = "before" # before, after, or at
payload = """G.P_CENTERS.p_arcana_mega_1.config.extra = math.floor(5+(2/3) + ((pack_level-2+tag_level) * (2/3)))
G.P_CENTERS.p_arcana_mega_1.config.choose = math.floor(2 + ((pack_level-2+tag_level) * (1/3)))
G.P_CENTERS.p_arcana_mega_2.config.extra = math.floor(5+(2/3) + ((pack_level-2+tag_level) * (2/3)))
G.P_CENTERS.p_arcana_mega_2.config.choose = math.floor(2 + ((pack_level-2+tag_level) * (1/3)))
"""
match_indent = true

# Meteor Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local key = 'p_celestial_mega_'..(math.random(1,2))"
position = "before" # before, after, or at
payload = """G.P_CENTERS.p_celestial_mega_1.config.extra = math.floor(5+(2/3) + ((pack_level-2+tag_level) * (2/3)))
G.P_CENTERS.p_celestial_mega_1.config.choose = math.floor(2 + ((pack_level-2+tag_level) * (1/3)))
G.P_CENTERS.p_celestial_mega_2.config.extra = math.floor(5+(2/3) + ((pack_level-2+tag_level) * (2/3)))
G.P_CENTERS.p_celestial_mega_2.config.choose = math.floor(2 + ((pack_level-2+tag_level) * (1/3)))
"""
match_indent = true

# Standard Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local key = 'p_standard_mega_1'"
position = "before" # before, after, or at
payload = """G.P_CENTERS.p_standard_mega_1.config.extra = math.floor(5+(2/3) + ((pack_level-2+tag_level) * (2/3)))
G.P_CENTERS.p_standard_mega_1.config.choose = math.floor(2 + ((pack_level-2+tag_level) * (1/3)))
G.P_CENTERS.p_standard_mega_2.config.extra = math.floor(5+(2/3) + ((pack_level-2+tag_level) * (2/3)))
G.P_CENTERS.p_standard_mega_2.config.choose = math.floor(2 + ((pack_level-2+tag_level) * (1/3)))
"""
match_indent = true

# Buffoon Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local key = 'p_buffoon_mega_1'"
position = "before" # before, after, or at
payload = """G.P_CENTERS.p_buffoon_mega_1.config.extra = math.floor(4+(2/3) + ((pack_level-2+tag_level) * (2/3)))
G.P_CENTERS.p_buffoon_mega_1.config.choose = math.floor(2 + ((pack_level-2+tag_level) * (1/3)))
"""
match_indent = true

# Ethereal Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local key = 'p_spectral_normal_1'"
position = "before" # before, after, or at
payload = """G.P_CENTERS.p_spectral_mega_1.config.extra = math.floor(4+(2/3) + ((pack_level-3+tag_level) * (2/3)))
G.P_CENTERS.p_spectral_mega_1.config.choose = math.floor(2 + ((pack_level-3+tag_level) * (1/3)))
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "local key = 'p_spectral_normal_1'"
position = "after" # before, after, or at
payload = """if tag_level >= 2 then
  key = 'p_spectral_mega_1'
end
"""
match_indent = true

# Boss Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "G.FUNCS.reroll_boss()"
position = "before" # before, after, or at
payload = """luchadors_sold = luchadors_sold + (tag_level-1)
blind_level_chicot_luchador('boss tag')
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "if self.name == 'Boss Tag' then"
position = "after" # before, after, or at
payload = """if G.STATE ~= G.STATES.BLIND_SELECT then
  G.CONTROLLER.locks[lock] = false
else"""
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "elseif _context.type == 'voucher_add' then"
position = "before" # before, after, or at
payload = "end"
match_indent = true

# Coupon Tag
[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = "if self.name == 'Coupon Tag' and (G.shop and not G.GAME.shop_free) then"
position = "after" # before, after, or at
payload = """if tag_level >= 2 then
  G.E_MANAGER:add_event(Event({func = function()
    change_shop_size(tag_level_old-1)
  return true end }))
end"""
match_indent = true


# VOUCHERS

# Overstock and Overstock Plus
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "change_shop_size(1)"
position = "at" # before, after, or at
payload = "change_shop_size(math.min(voucher_level, 2))"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "for i = 1, 2 do"
position = "at" # before, after, or at
payload = """local extrapacks = 0
if G.GAME.used_vouchers.v_overstock_norm and voucher_level >= 3 then extrapacks = extrapacks + 1 end
if G.GAME.used_vouchers.v_overstock_plus and voucher_level >= 3 then extrapacks = extrapacks + 1 end
  for i = 1, extrapacks+2 do"""
match_indent = true

# Reroll Surplus and Reroll Glut
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.GAME.current_round.reroll_cost = math.max(0, G.GAME.current_round.reroll_cost - self.ability.extra)"
position = "at" # before, after, or at
payload = """if G.GAME.current_round.free_rerolls <= 0 then G.GAME.current_round.reroll_cost = math.max(1, G.GAME.current_round.reroll_cost - self.ability.extra) end
if center_table.name == 'Reroll Glut' then
  G.GAME.current_round.reroll_cost_increase = G.GAME.current_round.reroll_cost_increase - self.ability.extra - G.GAME.round_resets.reroll_cost - (blind_level_old - 4)
end"""
match_indent = true

# Crystal Ball
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.consumeables.config.card_limit = G.consumeables.config.card_limit + 1"
position = "before" # before, after, or at
payload = "G.consumeables.config.card_limit = G.consumeables.config.card_limit + voucher_level"
match_indent = true

# Omen Globe
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if center_table.name == 'Clearance Sale' or center_table.name == 'Liquidation' then"
position = "before" # before, after, or at
payload = """if center_table.name == 'Omen Globe' and voucher_level >= 2 then
  G.GAME.spectral_rate = 28*math.min(12, voucher_level-1) / (15 - math.min(12, voucher_level-1))
end"""
match_indent = true

# Antimatter
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if center_table.name == 'Antimatter' then"
position = "after" # before, after, or at
payload = """G.E_MANAGER:add_event(Event({func = function()
  if G.jokers then 
    G.jokers.config.card_limit = G.jokers.config.card_limit + voucher_level
  end
  return true end }))
if false then
"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if center_table.name == 'Hieroglyph' or center_table.name == 'Petroglyph' then"
position = "before" # before, after, or at
payload = "end"
match_indent = true

# Illusion
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if center_table.name == 'Magic Trick' or center_table.name == 'Illusion' then"
position = "after" # before, after, or at
payload = """if center_table.name == 'Illusion' and voucher_level >= 2 then
  card2 = create_card('Base', area, nil, nil, nil, nil, nil, 'sho')
  local enhancement = pseudorandom(pseudoseed('illenh'))
  local edition = pseudorandom(pseudoseed('illedi'))
  local seal = pseudorandom(pseudoseed('illseal')) 
  if enhancement >= 364/377 then card2:set_ability(G.P_CENTERS.m_stone, nil, true)
  elseif enhancement >= (6*52)/377 then card2:set_ability(G.P_CENTERS.m_wild, nil, true)
  elseif enhancement >= (5*52)/377 then card2:set_ability(G.P_CENTERS.m_mult, nil, true)
  elseif enhancement >= (4*52)/377 then card2:set_ability(G.P_CENTERS.m_bonus, nil, true)
  elseif enhancement >= (3*52)/377 then card2:set_ability(G.P_CENTERS.m_gold, nil, true)
  elseif enhancement >= (2*52)/377 then card2:set_ability(G.P_CENTERS.m_glass, nil, true)
  elseif enhancement >= (1*52)/377 then card2:set_ability(G.P_CENTERS.m_steel, nil, true)
  elseif enhancement >= (0*52)/377 then card2:set_ability(G.P_CENTERS.m_lucky, nil, true)
  end
  if edition >= 0.93 then card2:set_edition({negative = true}, true) 
  elseif edition >= 0.62 then card2:set_edition({polychrome = true}, true)
  elseif edition >= 0.31 then card2:set_edition({holo = true}, true)
  elseif edition >= 0 then card2:set_edition({foil = true}, true)
  end
  if seal > 0.75 then card2:set_seal('Red', true)
  elseif seal > 0.5 then card2:set_seal('Blue', true)
  elseif seal > 0.25 then card2:set_seal('Gold', true)
  else card2:set_seal('Purple', true)
  end
  create_shop_card_ui(card2, 'Joker', G.shop_jokers)
  card2.states.visible = false
  card2.ability.couponed = true
  card2:start_materialize()
  G.shop_jokers:emplace(card2)
  card2:set_cost()
  G.shop_jokers.T.w = math.min(4, G.GAME.shop.joker_max+1)*1.01*G.CARD_W
  G.shop:recalculate()
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.shop_jokers:emplace(create_card_for_shop(G.shop_jokers))"
position = "after" # before, after, or at
payload = """end
if G.GAME.used_vouchers["v_illusion"] and voucher_level >= 2 then
  card2 = create_card('Base', area, nil, nil, nil, nil, nil, 'sho')
  local enhancement = pseudorandom(pseudoseed('illenh'))
  local edition = pseudorandom(pseudoseed('illedi'))
  local seal = pseudorandom(pseudoseed('illseal')) 
  if enhancement >= 364/377 then card2:set_ability(G.P_CENTERS.m_stone, nil, true)
  elseif enhancement >= (6*52)/377 then card2:set_ability(G.P_CENTERS.m_wild, nil, true)
  elseif enhancement >= (5*52)/377 then card2:set_ability(G.P_CENTERS.m_mult, nil, true)
  elseif enhancement >= (4*52)/377 then card2:set_ability(G.P_CENTERS.m_bonus, nil, true)
  elseif enhancement >= (3*52)/377 then card2:set_ability(G.P_CENTERS.m_gold, nil, true)
  elseif enhancement >= (2*52)/377 then card2:set_ability(G.P_CENTERS.m_glass, nil, true)
  elseif enhancement >= (1*52)/377 then card2:set_ability(G.P_CENTERS.m_steel, nil, true)
  elseif enhancement >= (0*52)/377 then card2:set_ability(G.P_CENTERS.m_lucky, nil, true)
  end
  if edition >= 0.93 then card2:set_edition({negative = true}, true) 
  elseif edition >= 0.62 then card2:set_edition({polychrome = true}, true)
  elseif edition >= 0.31 then card2:set_edition({holo = true}, true)
  elseif edition >= 0 then card2:set_edition({foil = true}, true)
  end
  if seal > 0.75 then card2:set_seal('Red', true)
  elseif seal > 0.5 then card2:set_seal('Blue', true)
  elseif seal > 0.25 then card2:set_seal('Gold', true)
  else card2:set_seal('Purple', true)
  end
  create_shop_card_ui(card2, 'Joker', G.shop_jokers)
  card2.states.visible = false
  card2.ability.couponed = true
  card2:start_materialize()
  G.shop_jokers:emplace(card2)
  card2:set_cost()
  G.shop_jokers.T.w = math.min(4, G.GAME.shop.joker_max+1)*1.01*G.CARD_W
  G.shop:recalculate()"""
match_indent = true

# Hieroglyph and Petroglyph
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if center_table.name == 'Hieroglyph' then"
position = "at" # before, after, or at
payload = "if center_table.name == 'Hieroglyph' and voucher_level == 1 then"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if center_table.name == 'Petroglyph' then"
position = "at" # before, after, or at
payload = "if center_table.name == 'Petroglyph' and voucher_level == 1 then"
match_indent = true

# Paint Brush and Palette
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(1)"
position = "at" # before, after, or at
payload = """G.hand:change_size(math.floor(1.5 + (voucher_level-1)*0.5))
global_hand_size = global_hand_size + math.floor(1.5 + (voucher_level-1)*0.5)"""
match_indent = true


# DECKS

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "self.cost = math.max(1, math.floor((self.base_cost + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))"
position = "at" # before, after, or at
payload = "self.cost = math.max(1, math.floor((self.base_cost + (blind_level_old-1) + self.extra_cost + 0.5)*(100-G.GAME.discount_percent)/100))"
match_indent = true

# Level 2 / Level 3 / Level 4
[[patches]]
[patches.pattern]
target = "back.lua"
pattern = "if self.effect.config.voucher then"
position = "before" # before, after, or at
payload = """if self.effect.config.level ~= nil then
  -- set_levels(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14) -- Debug deck
  -- blind_level_old = 14
  -- tag_level_old = 12
  -- tag_level_new = 12
  set_levels(self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level, self.effect.config.level)
  blind_level_old = self.effect.config.level
  out_of_blind = 1
  luchadors_sold = 0
  tag_level_old = self.effect.config.level
  tag_level_new = self.effect.config.level
  upgrade_non_booster = false
  shop_number = 0
  upgrades_used = false
  global_hand_size = 8
  for k, v in pairs(G.GAME.hands) do
    level_up_hand(self, k, true, self.effect.config.level-1)
  end
else
  set_levels(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
  blind_level_old = 1
  out_of_blind = 1
  luchadors_sold = 0
  tag_level_old = self.effect.config.level
  tag_level_new = self.effect.config.level
  upgrade_non_booster = false
  shop_number = 0
  upgrades_used = false
  global_hand_size = 8
  collection_levels = {mult_level, xmult_level, chips_level, econ_level, effect_level, tarot_level, planet_level, spectral_level, enhance_level, edition_level, pack_level, tag_level, voucher_level, blind_level}
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "local cardAreas = saveTable.cardAreas"
position = "before" # before, after, or at
payload = """
  mult_level = saveTable.LEVEL.mult
  xmult_level = saveTable.LEVEL.xmult
  chips_level = saveTable.LEVEL.chips
  econ_level = saveTable.LEVEL.econ
  effect_level = saveTable.LEVEL.effect
  tarot_level = saveTable.LEVEL.tarot
  planet_level = saveTable.LEVEL.planet
  spectral_level = saveTable.LEVEL.spectral
  enhance_level = saveTable.LEVEL.enhance
  edition_level = saveTable.LEVEL.edition
  pack_level = saveTable.LEVEL.pack
  tag_level = saveTable.LEVEL.tag
  voucher_level = saveTable.LEVEL.voucher
  blind_level = saveTable.LEVEL.blind
  blind_level_old = saveTable.LEVEL.blind_old
  out_of_blind = saveTable.LEVEL.out
  luchadors_sold = saveTable.LEVEL.luchador
  tag_level_old = saveTable.LEVEL.tag_old
  tag_level_new = saveTable.LEVEL.tag_new
  upgrade_non_booster = saveTable.LEVEL.UNB
  shop_number = saveTable.LEVEL.shop_num
  upgrades_used = saveTable.LEVEL.upg_used
  global_hand_size = saveTable.LEVEL.GHS
  collection_levels = {mult_level, xmult_level, chips_level, econ_level, effect_level, tarot_level, planet_level, spectral_level, enhance_level, edition_level, pack_level, tag_level, voucher_level, blind_level}
  set_centers(mult_level, xmult_level, chips_level, econ_level, effect_level, tarot_level, planet_level, spectral_level, enhance_level, edition_level, pack_level, tag_level, voucher_level, blind_level)
  desc(mult_level, xmult_level, chips_level, econ_level, effect_level, tarot_level, planet_level, spectral_level, enhance_level, edition_level, pack_level, tag_level, voucher_level, blind_level)"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if (not G.SETTINGS.tutorial_complete) and G.SETTINGS.tutorial_progress.completed_parts['big_blind'] then G.SETTINGS.tutorial_complete = true end"
position = "before" # before, after, or at
payload = """
  mult_level = 1
  xmult_level = 1
  chips_level = 1
  econ_level = 1
  effect_level = 1
  tarot_level = 1
  planet_level = 1
  spectral_level = 1
  enhance_level = 1
  edition_level = 1
  pack_level = 1
  tag_level = 1
  voucher_level = 1
  blind_level = 1
  blind_level_old = 1
  out_of_blind = 1
  luchadors_sold = 0
  tag_level_old = 1
  tag_level_new = 1
  upgrade_non_booster = false
  shop_number = 0
  upgrades_used = false
  global_hand_size = 8
  collection_levels = {mult_level, xmult_level, chips_level, econ_level, effect_level, tarot_level, planet_level, spectral_level, enhance_level, edition_level, pack_level, tag_level, voucher_level, blind_level}
  set_centers(mult_level, xmult_level, chips_level, econ_level, effect_level, tarot_level, planet_level, spectral_level, enhance_level, edition_level, pack_level, tag_level, voucher_level, blind_level)
  desc(mult_level, xmult_level, chips_level, econ_level, effect_level, tarot_level, planet_level, spectral_level, enhance_level, edition_level, pack_level, tag_level, voucher_level, blind_level)"""
match_indent = true


# FIX HAND SIZE BUG (with negative playing cards)
# The variable global_hand_size can be changed by:
# Jokers:
#   Juggler
#   Troubadour
#   Turtle Bean
#   Merry Andy
#   Stuntman
# Spectrals:
#   Ouija
#   Ectoplasm
# Vouchers:
#   Paint Brush
#   Palette
# Blinds:
#   The Manacle
# global_hand_size should not be affect by negative playing cards

# Stuntman, Turtle Bean, Troubadour
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(self.ability.extra.h_size)"
position = "after" # before, after, or at
payload = "global_hand_size = global_hand_size + self.ability.extra.h_size"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(-self.ability.extra.h_size)"
position = "after" # before, after, or at
payload = "global_hand_size = global_hand_size - self.ability.extra.h_size"
match_indent = true

# Turtle Bean
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(- self.ability.extra.h_mod)"
position = "after" # before, after, or at
payload = "global_hand_size = global_hand_size - self.ability.extra.h_mod"
match_indent = true

# Juggler, Merry Andy
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(self.ability.h_size)"
position = "after" # before, after, or at
payload = "global_hand_size = global_hand_size + self.ability.h_size"
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(-self.ability.h_size)"
position = "after" # before, after, or at
payload = "global_hand_size = global_hand_size - self.ability.h_size"
match_indent = true

# Ectoplasm
[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "G.hand:change_size(-G.GAME.ecto_minus)"
position = "after" # before, after, or at
payload = "global_hand_size = global_hand_size - G.GAME.ecto_minus"
match_indent = true








# UPGRADES

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.name == 'Grim' and spectral_level >= 2 then"
position = "before" # before, after, or at
payload = """if self.ability.set == 'Upgrade' then
  if self.ability.name == 'c_choose_upgrade' then
    return false
  else
    return true
  end
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if self.STATE == self.STATES.BUFFOON_PACK then"
position = "before" # before, after, or at
payload = """if self.STATE == 256 then
  self:update_upgrades(dt)
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "cardarea.lua"
pattern = "(self.config.type == 'hand' and state == G.STATES.SMODS_BOOSTER_OPENED) or"
position = "after" # before, after, or at
payload = "(self.config.type == 'hand' and state == 256) or"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.shop_booster:emplace(card)"
position = "after" # before, after, or at
payload = "end"
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "if G.GAME.current_round.used_packs[i] ~= 'USED' then"
position = "after" # before, after, or at
payload = """local choose_upgrade = pseudorandom(pseudoseed('chupg'))
if choose_upgrade <= 0.06 then
  local card = Card(G.shop_booster.T.x + G.shop_booster.T.w/2, G.shop_booster.T.y, G.CARD_W*1.27, G.CARD_H*1.27, G.P_CARDS.empty, G.P_CENTERS['c_choose_upgrade'])
  create_shop_card_ui(card, 'Booster', G.shop_booster)
  card.ability.booster_pos = i
  card:start_materialize()
  G.shop_booster:emplace(card)
else"""
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "G.shop_jokers:emplace(create_card_for_shop(G.shop_jokers))"
position = "at" # before, after, or at
payload = """local choose_upgrade = pseudorandom(pseudoseed('chupg'))
if choose_upgrade <= 0.006 then
  local card = Card(G.shop_jokers.T.x + G.shop_jokers.T.w/2, G.shop_jokers.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['c_choose_upgrade'])
  G.shop_jokers:emplace(card)
  create_shop_card_ui(card, 'Upgrade', G.shop_jokers)
elseif shop_number == 2 and not upgrades_used then
  upgrades_used = true
  local card = Card(G.shop_jokers.T.x + G.shop_jokers.T.w/2, G.shop_jokers.T.y, G.CARD_W, G.CARD_H, G.P_CARDS.empty, G.P_CENTERS['c_choose_upgrade'])
  G.shop_jokers:emplace(card)
  create_shop_card_ui(card, 'Upgrade', G.shop_jokers)
else
  G.shop_jokers:emplace(create_card_for_shop(G.shop_jokers))
end"""
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = "if self.ability.consumeable or self.ability.set == 'Joker' or (self.area and self.area == G.pack_cards) then"
position = "at" # before, after, or at
payload = """if self.ability.name == 'c_choose_upgrade' then
          if self.highlighted then
            self.children.use_button = UIBox{
                definition = {
          n=G.UIT.ROOT, config = {padding = 0, colour = G.C.CLEAR}, nodes={
            {n=G.UIT.R, config={mid = true}, nodes={
            }},
            {n=G.UIT.R, config={ref_table = self, r = 0.08, padding = 0.1, align = "cm", minw = 0.5*self.T.w - 0.15, minh = 0.4*self.T.h, maxw = 0.85*self.T.w - 0.15, hover = true, shadow = true, colour = G.C.UI.BACKGROUND_INACTIVE, one_press = true, button = 'use_card', func = 'can_upgrade'}, nodes={
              {n=G.UIT.T, config={text = localize('b_upgrade'),colour = G.C.UI.TEXT_LIGHT, scale = 0.55, shadow = true}}
            }},
        }},
                config = {align=
                        ((self.area == G.jokers) or (self.area == G.consumeables)) and "cr" or
                        "bmi"
                    , offset = 
                        ((self.area == G.jokers) or (self.area == G.consumeables)) and {x=0,y=0} or
                        {x=0.05,y=0.65},
                    parent =self}
            }
        elseif self.children.use_button then
            self.children.use_button:remove()
            self.children.use_button = nil
        end
elseif self.ability.consumeable or self.ability.set == 'Joker' or (self.area and self.area == G.pack_cards) then"""
match_indent = true






















 
